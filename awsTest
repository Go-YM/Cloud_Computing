import boto3
from botocore.exceptions import WaiterError

access_key=""
secret_key =""
global ec2
global resource
global ssm

def init_aws():
    global ec2
    global resource
    global ssm

    ec2 = boto3.client('ec2',aws_access_key_id=access_key,aws_secret_access_key=secret_key,region_name="us-west-1")
    ssm = boto3.client('ssm',aws_access_key_id=access_key,aws_secret_access_key=secret_key,region_name="us-west-1")
    resource = boto3.resource('ec2',aws_access_key_id=access_key,aws_secret_access_key=secret_key,region_name="us-west-1")

def list_instances(ec2):
    print("Listing instances...")
    try:
        response = ec2.describe_instances()
        for reservation in response['Reservations']:
            for instance in reservation['Instances']:
                print(f"[id] {instance['InstanceId']}, "
                      f"[AMI] {instance['ImageId']}, "
                      f"[type] {instance['InstanceType']}, "
                      f"[state] {instance['State']['Name']}, "
                      f"[monitoring state] {instance['Monitoring']['State']}")
    except Exception as e:
        print(f"Error listing instances: {e}")

def available_zones(ec2):
    print("Available zones...")
    try:
        response = ec2.describe_availability_zones()
        for zone in response['AvailabilityZones']:
            print(f"[id] {zone['ZoneId']}, [region] {zone['RegionName']}, [zone] {zone['ZoneName']}")
    except Exception as e:
        print(f"Error fetching zones: {e}")

def start_instance(ec2, instance_id):
    print(f"Starting instance {instance_id}...")
    try:
        ec2.start_instances(InstanceIds=[instance_id])
        print(f"Successfully started instance {instance_id}")
    except Exception as e:
        print(f"Error starting instance {instance_id}: {e}")

def stop_instance(ec2, instance_id):
    print(f"Stopping instance {instance_id}...")
    try:
        ec2.stop_instances(InstanceIds=[instance_id])
        print(f"Successfully stopped instance {instance_id}")
    except Exception as e:
        print(f"Error stopping instance {instance_id}: {e}")

def available_regions(ec2):
    print("Available regions...")
    try:
        response = ec2.describe_regions()
        for region in response['Regions']:
            print(f"[region] {region['RegionName']}, [endpoint] {region['Endpoint']}")
    except Exception as e:
        print(f"Error fetching regions: {e}")

def create_instance(ec2, ami_id):
    print(f"Creating instance with AMI {ami_id}...")
    try:
        response = ec2.run_instances(
            ImageId=ami_id,
            InstanceType='t2.micro',
            MinCount=1,
            MaxCount=1
        )
        instance_id = response['Instances'][0]['InstanceId']
        print(f"Successfully created instance {instance_id} based on AMI {ami_id}")
    except Exception as e:
        print(f"Error creating instance: {e}")

def reboot_instance(ec2, instance_id):
    print(f"Rebooting instance {instance_id}...")
    try:
        ec2.reboot_instances(InstanceIds=[instance_id])
        print(f"Successfully rebooted instance {instance_id}")
    except Exception as e:
        print(f"Error rebooting instance {instance_id}: {e}")

def list_images(ec2):
    print("Listing images...")
    try:
        response = ec2.describe_images(Filters=[{'Name': 'name', 'Values': ['htcondor-slave-image']}])
        for image in response['Images']:
            print(f"[ImageID] {image['ImageId']}, [Name] {image['Name']}, [Owner] {image['OwnerId']}")
    except Exception as e:
        print(f"Error listing images: {e}")

def main():
    try:
        ec2 = boto3.client('ec2', region_name='us-east-1')

        while True:
            print("\n------------------------------------------------------------")
            print("           Amazon AWS Control Panel using boto3")
            print("------------------------------------------------------------")
            print("  1. List instances              2. Available zones")
            print("  3. Start instance              4. Available regions")
            print("  5. Stop instance               6. Create instance")
            print("  7. Reboot instance             8. List images")
            print("                                 99. Quit")
            print("------------------------------------------------------------")
            choice = input("Enter an integer: ")

            if choice == '1':
                list_instances(ec2)
            elif choice == '2':
                available_zones(ec2)
            elif choice == '3':
                instance_id = input("Enter instance ID: ").strip()
                start_instance(ec2, instance_id)
            elif choice == '4':
                available_regions(ec2)
            elif choice == '5':
                instance_id = input("Enter instance ID: ").strip()
                stop_instance(ec2, instance_id)
            elif choice == '6':
                ami_id = input("Enter AMI ID: ").strip()
                create_instance(ec2, ami_id)
            elif choice == '7':
                instance_id = input("Enter instance ID: ").strip()
                reboot_instance(ec2, instance_id)
            elif choice == '8':
                list_images(ec2)
            elif choice == '99':
                print("Exiting...")
                break
            else:
                print("Invalid choice. Try again.")

    except (NoCredentialsError, PartialCredentialsError):
        print("Error: AWS credentials not found or incomplete. Make sure to set up your AWS CLI or environment variables.")
    except Exception as e:
        print(f"Unexpected error: {e}")

if __name__ == "__main__":
    main()
